name: Yanzz RDP (ngrok v3)

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        shell: pwsh
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name 'fDenyTSConnections' -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name 'UserAuthentication' -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name 'SecurityLayer' -Value 0 -Force
          netsh advfirewall firewall delete rule name="RDP-ngrok" | Out-Null
          netsh advfirewall firewall add rule name="RDP-ngrok" dir=in action=allow protocol=TCP localport=3389 | Out-Null
          Restart-Service -Name TermService -Force

      - name: Create RDP User with Secure Password
        shell: pwsh
        run: |
          Add-Type -AssemblyName System.Security
          $charSet = @{
            Upper   = [char[]](65..90)
            Lower   = [char[]](97..122)
            Number  = [char[]](48..57)
            Special = ([char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126))
          }
          $raw = @()
          $raw += $charSet.Upper   | Get-Random -Count 4
          $raw += $charSet.Lower   | Get-Random -Count 4
          $raw += $charSet.Number  | Get-Random -Count 4
          $raw += $charSet.Special | Get-Random -Count 4
          $password = -join ($raw | Sort-Object { Get-Random })
          $secure   = ConvertTo-SecureString $password -AsPlainText -Force

          if (-not (Get-LocalUser -Name 'Yanzz' -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name 'Yanzz' -Password $secure -AccountNeverExpires
          } else {
            (Get-LocalUser -Name 'Yanzz') | Set-LocalUser -Password $secure
          }

          Add-LocalGroupMember -Group 'Administrators' -Member 'Yanzz'
          Add-LocalGroupMember -Group 'Remote Desktop Users' -Member 'Yanzz'

          "RDP_PASS=$password" | Out-File -FilePath $env:GITHUB_ENV -Encoding ascii -Append

      - name: Verify local RDP service
        shell: pwsh
        run: |
          Get-Service TermService | Format-List Status,Name
          $ok = Test-NetConnection -ComputerName 127.0.0.1 -Port 3389 -InformationLevel Quiet
          if (-not $ok) {
            Write-Host "RDP not listening yet. Waiting 10s..."
            Start-Sleep -Seconds 10
            $ok = Test-NetConnection -ComputerName 127.0.0.1 -Port 3389 -InformationLevel Quiet
          }
          if (-not $ok) { Write-Error "RDP (3389) not listening locally."; exit 1 }
          Write-Host "RDP local OK (3389)."

      - name: Download & Install ngrok (then upgrade to v3)
        shell: pwsh
        run: |
          # Download ngrok (bootstrap v2) kemudian upgrade via 'ngrok update' → v3.x terbaru
          $ngrokUrl = "https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-windows-amd64.zip"
          $zip  = "$env:TEMP\ngrok.zip"
          $dest = "$env:TEMP\ngrok"
          Invoke-WebRequest -Uri $ngrokUrl -OutFile $zip -UseBasicParsing
          Remove-Item -Recurse -Force $dest -ErrorAction SilentlyContinue
          Expand-Archive -Path $zip -DestinationPath $dest -Force
          $ngrokExe = Join-Path $dest "ngrok.exe"
          if (-not (Test-Path $ngrokExe)) { Write-Error "ngrok binary not found"; exit 1 }

          # Hardcoded authtoken (permintaan kamu) — HATI2 keamanan bila repo public
          & $ngrokExe authtoken '33fhpiZko6IDc6ZqUaBrcs6fBRH_7EoRfL4vt1zJCHEggYK54'

          # Upgrade agen ke v3 agar cocok dg requirement akun kamu
          & $ngrokExe update
          # Cetak versi setelah update
          & $ngrokExe version

          "NGROK_EXE=$ngrokExe" | Out-File -FilePath $env:GITHUB_ENV -Encoding ascii -Append

      - name: Start ngrok TCP tunnel (v3 syntax; parse stdout/stderr)
        shell: pwsh
        run: |
          $ngrokExe = $env:NGROK_EXE
          if (-not $ngrokExe) { Write-Error "NGROK_EXE not set"; exit 1 }

          $logDir  = "$env:TEMP\ngrok"
          New-Item -ItemType Directory -Force -Path $logDir | Out-Null
          $outFile = Join-Path $logDir "ngrok_out.log"
          $errFile = Join-Path $logDir "ngrok_err.log"

          # v3: flags di depan subcommand, pakai '--'
          $args = @("--region=ap", "--log=stdout", "tcp", "3389")
          $p = Start-Process -FilePath $ngrokExe -ArgumentList $args `
               -NoNewWindow -RedirectStandardOutput $outFile -RedirectStandardError $errFile -PassThru
          Write-Host "ngrok PID: $($p.Id)"

          Start-Sleep -Seconds 2
          if (Test-Path $outFile) { Get-Content $outFile -Tail 40 | Write-Host }
          if (Test-Path $errFile) { Get-Content $errFile -Tail 40 | Write-Host }

          # Tunggu pola tcp://host:port muncul di stdout/stderr
          $public   = $null
          $deadline = (Get-Date).AddMinutes(3)
          while (-not $public -and (Get-Date) -lt $deadline) {
            $text = ""
            if (Test-Path $outFile) { $text += ((Get-Content $outFile -Tail 400 -ErrorAction SilentlyContinue) -join "`n") }
            if (Test-Path $errFile) { $text += "`n" + ((Get-Content $errFile -Tail 400 -ErrorAction SilentlyContinue) -join "`n") }

            $m = [regex]::Match($text, 'tcp://[^\s"]+')
            if ($m.Success) { $public = $m.Value; break }

            if ($text -match '(not\s+allowed|forbidden|unauthorized|rate\s*limit|ERR|error)') {
              Write-Host "==== ngrok recent logs ===="
              Write-Host $text
              Write-Error "Ngrok reported an error; cannot obtain tcp endpoint."
              exit 1
            }
            Start-Sleep -Seconds 3
          }

          if (-not $public) {
            Write-Host "==== ngrok last logs (stdout) ===="
            if (Test-Path $outFile) { Get-Content $outFile -Tail 400 | Write-Host }
            Write-Host "==== ngrok last logs (stderr) ===="
            if (Test-Path $errFile) { Get-Content $errFile -Tail 400 | Write-Host }
            Write-Error "Ngrok tunnel tidak tersedia setelah menunggu."
            exit 1
          }

          "NGROK_PUBLIC=$public" | Out-File -FilePath $env:GITHUB_ENV -Encoding ascii -Append
          Write-Host "✅ ngrok public endpoint: $public"

          $clean = $public.Replace("tcp://","")
          $parts = $clean.Split(":")
          "TUNNEL_HOST=$($parts[0])" | Out-File -FilePath $env:GITHUB_ENV -Encoding ascii -Append
          "TUNNEL_PORT=$($parts[1])" | Out-File -FilePath $env:GITHUB_ENV -Encoding ascii -Append

      - name: Verify RDP via ngrok endpoint
        shell: pwsh
        run: |
          $host = $env:TUNNEL_HOST
          $port = [int]$env:TUNNEL_PORT
          Write-Host "Testing TCP connectivity to $host:$port"
          $ok = Test-NetConnection -ComputerName $host -Port $port -InformationLevel Quiet
          if (-not $ok) { Write-Error "TCP connection to RDP via ngrok failed."; exit 1 }
          Write-Host "TCP connectivity successful!"

      - name: Create .rdp file for download
        shell: pwsh
        run: |
          $host = $env:TUNNEL_HOST
          $port = $env:TUNNEL_PORT
          $path = Join-Path $env:RUNNER_TEMP "Yanzz_ngrok.rdp"
          $lines = @(
            'screen mode id:i:2',
            'use multimon:i:0',
            'desktopwidth:i:1280',
            'desktopheight:i:720',
            'session bpp:i:32',
            "full address:s:$host:$port",
            'username:s:Yanzz',
            'prompt for credentials:i:1',
            'administrative session:i:0',
            'authentication level:i:0',
            'compression:i:1',
            'networkautodetect:i:1',
            'audiocapturemode:i:0'
          )
          $lines | Set-Content -Path $path -Encoding Ascii
          "RDP_FILE=$path" | Out-File -FilePath $env:GITHUB_ENV -Encoding ascii -Append
          Write-Host "RDP file created at $path"

      - name: Upload .rdp artifact
        uses: actions/upload-artifact@v4
        with:
          name: Yanzz_ngrok_rdp
          path: ${{ env.RDP_FILE }}
          if-no-files-found: error
          retention-days: 1

      - name: Maintain Connection (show access info)
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "=== RDP ACCESS (ngrok) ==="
          Write-Host "Endpoint : $env:NGROK_PUBLIC"
          Write-Host "Username : Yanzz"
          Write-Host "Password : $env:RDP_PASS"
          Write-Host "RDP file : (Actions -> Artifacts -> Yanzz_ngrok_rdp)"
          Write-Host "=========================="
          while ($true) {
            Write-Host "[$(Get-Date -Format o)] RDP via ngrok active. Cancel the workflow to stop."
            Start-Sleep -Seconds 300
          }
